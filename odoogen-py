#! /usr/bin/env python

"""Generate Odoo Python module.
"""

import os
import sys
import argparse
import datetime

import jinja2

from common import die
from templates import renderfile, TEMPLATE_LICENSE


def main(options):
    """Main program."""
    name = options.name
    filename = "%s.py" % name
    if os.path.exists(filename):
        die(3, 'File %s already exists' % filename)
    odoo_data = read_openerp_py(options)
    context = context_from_odoo_data(odoo_data, datetime.date.today())
    license = jinja2.Template(TEMPLATE_LICENSE).render(**context)
    renderfile(filename, TEMPLATE_PY_FILE, {'license': license})
    sys.stdout.write('from . import %s\n' % (name,))
    return

def context_from_odoo_data(odoo_data, today):
    """Take data from __openerp__.py, return context for templates.
    """
    return {
        'website': odoo_data['website'],
        'fullname': odoo_data['name'],
        'author': odoo_data['author'],
        'today': today,
    }

def find_openerp_py(options):
    """Return the path to __openerp__.py, or None if not found."""
    return "__openerp__.py"

def read_openerp_py(options):
    """Read the __openerp__.py from the pwd."""
    with open(find_openerp_py(options), 'rb') as oepy:
        return eval(oepy.read())

TEMPLATE_PY_FILE = """# -*- coding: utf-8 -*-
{{license}}

from openerp import models, fields, api



# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
"""

def get_options():
    """Get options for the script."""
    parser = argparse.ArgumentParser(
        description="DESCRIPTION",
    )
    parser.add_argument('name', help='name of Python module to generate')
    options = parser.parse_args()
    return options

if __name__ == "__main__":
    main(get_options())
